name: Build and deploy api

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push tgposter-api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: TgPoster.API/Dockerfile
          push: true
          tags: ghcr.io/evilvegetarian/tgposter-api:latest

      - name: Upload docker-compose.api.yml
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-api
          path: docker/docker-compose.api.yml

  deploy-api:
    needs: [build-and-push]
    runs-on: [self-hosted, runner]

    steps:
      - name: Download docker-compose.api.yml
        uses: actions/download-artifact@v4
        with:
          name: docker-compose-api

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image and restart container
        run: |
          export TGPOSTER_API_CONNECTIONSTRING='${{ secrets.CONNECTIONSTRING }}' 
          export TGPOSTER_API_LOGSURL='${{ secrets.LOGSURL }}'
          export TGPOSTER_API_JWTOPTIONS_SECRETKEY='${{ secrets.JWTOPTIONS_SECRETKEY }}'
          export TGPOSTER_API_TELEGRAMOPTIONS_SECRETKEY='${{ secrets.TELEGRAMOPTIONS_SECRETKEY }}'
          docker compose -f docker-compose.api.yml pull
          docker compose -f docker-compose.api.yml up -d
      
      - name: Clean up old docker images and containers
        if: always() 
        run: |
          docker container prune -f
          docker image prune -a -f