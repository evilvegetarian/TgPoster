/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateDaysRequest,
  DayOfWeekResponse,
  GetApiV1DayParams,
  GetDaysResponse,
  ProblemDetails,
  UpdateTimeRequest
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
 */
export const getApiV1DayDayOfWeek = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<DayOfWeekResponse[]>(
      {url: `/api/v1/day/day-of-week`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1DayDayOfWeekQueryKey = () => {
    return [`/api/v1/day/day-of-week`] as const;
    }

    
export const getGetApiV1DayDayOfWeekQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DayDayOfWeekQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>> = ({ signal }) => getApiV1DayDayOfWeek(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DayDayOfWeekQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>>
export type GetApiV1DayDayOfWeekQueryError = ProblemDetails


export function useGetApiV1DayDayOfWeek<TData = Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DayDayOfWeek<TData = Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DayDayOfWeek<TData = Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
 */

export function useGetApiV1DayDayOfWeek<TData = Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DayDayOfWeek>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DayDayOfWeekQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
 */
export const postApiV1Day = (
    createDaysRequest: CreateDaysRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/day`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDaysRequest, signal
    },
      );
    }
  


export const getPostApiV1DayMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Day>>, TError,{data: CreateDaysRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Day>>, TError,{data: CreateDaysRequest}, TContext> => {

const mutationKey = ['postApiV1Day'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Day>>, {data: CreateDaysRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Day(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DayMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Day>>>
    export type PostApiV1DayMutationBody = CreateDaysRequest
    export type PostApiV1DayMutationError = ProblemDetails

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
 */
export const usePostApiV1Day = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Day>>, TError,{data: CreateDaysRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Day>>,
        TError,
        {data: CreateDaysRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1DayMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π
 */
export const getApiV1Day = (
    params: GetApiV1DayParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetDaysResponse[]>(
      {url: `/api/v1/day`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1DayQueryKey = (params: GetApiV1DayParams,) => {
    return [`/api/v1/day`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1DayQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Day>>, TError = ProblemDetails>(params: GetApiV1DayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DayQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Day>>> = ({ signal }) => getApiV1Day(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DayQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Day>>>
export type GetApiV1DayQueryError = ProblemDetails


export function useGetApiV1Day<TData = Awaited<ReturnType<typeof getApiV1Day>>, TError = ProblemDetails>(
 params: GetApiV1DayParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Day>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Day>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Day<TData = Awaited<ReturnType<typeof getApiV1Day>>, TError = ProblemDetails>(
 params: GetApiV1DayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Day>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Day>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Day<TData = Awaited<ReturnType<typeof getApiV1Day>>, TError = ProblemDetails>(
 params: GetApiV1DayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π
 */

export function useGetApiV1Day<TData = Awaited<ReturnType<typeof getApiV1Day>>, TError = ProblemDetails>(
 params: GetApiV1DayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Day>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DayQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
 */
export const patchApiV1DayTime = (
    updateTimeRequest: UpdateTimeRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/day/time`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateTimeRequest
    },
      );
    }
  


export const getPatchApiV1DayTimeMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DayTime>>, TError,{data: UpdateTimeRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DayTime>>, TError,{data: UpdateTimeRequest}, TContext> => {

const mutationKey = ['patchApiV1DayTime'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiV1DayTime>>, {data: UpdateTimeRequest}> = (props) => {
          const {data} = props ?? {};

          return  patchApiV1DayTime(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1DayTimeMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiV1DayTime>>>
    export type PatchApiV1DayTimeMutationBody = UpdateTimeRequest
    export type PatchApiV1DayTimeMutationError = ProblemDetails

    /**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
 */
export const usePatchApiV1DayTime = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DayTime>>, TError,{data: UpdateTimeRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiV1DayTime>>,
        TError,
        {data: UpdateTimeRequest},
        TContext
      > => {

      const mutationOptions = getPatchApiV1DayTimeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    