/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ProblemDetails,
  SignInRequest,
  SignInResponse,
  SignOnRequest,
  SignOnResponse
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const postApiV1AccountSignOn = (
    signOnRequest: SignOnRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SignOnResponse>(
      {url: `/api/v1/account/sign-on`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signOnRequest, signal
    },
      );
    }
  


export const getPostApiV1AccountSignOnMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignOn>>, TError,{data: SignOnRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignOn>>, TError,{data: SignOnRequest}, TContext> => {

const mutationKey = ['postApiV1AccountSignOn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1AccountSignOn>>, {data: SignOnRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1AccountSignOn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1AccountSignOnMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1AccountSignOn>>>
    export type PostApiV1AccountSignOnMutationBody = SignOnRequest
    export type PostApiV1AccountSignOnMutationError = ProblemDetails

    /**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePostApiV1AccountSignOn = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignOn>>, TError,{data: SignOnRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1AccountSignOn>>,
        TError,
        {data: SignOnRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1AccountSignOnMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ó–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
 */
export const postApiV1AccountSignIn = (
    signInRequest: SignInRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SignInResponse>(
      {url: `/api/v1/account/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInRequest, signal
    },
      );
    }
  


export const getPostApiV1AccountSignInMutationOptions = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignIn>>, TError,{data: SignInRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignIn>>, TError,{data: SignInRequest}, TContext> => {

const mutationKey = ['postApiV1AccountSignIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1AccountSignIn>>, {data: SignInRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1AccountSignIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1AccountSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1AccountSignIn>>>
    export type PostApiV1AccountSignInMutationBody = SignInRequest
    export type PostApiV1AccountSignInMutationError = ProblemDetails | void

    /**
 * @summary –ó–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
 */
export const usePostApiV1AccountSignIn = <TError = ProblemDetails | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1AccountSignIn>>, TError,{data: SignInRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1AccountSignIn>>,
        TError,
        {data: SignInRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1AccountSignInMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    