/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  EnumViewModel
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




export const getApiOptionsMessageStatuses = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<EnumViewModel[]>(
      {url: `/api/options/message-statuses`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOptionsMessageStatusesQueryKey = () => {
    return [`/api/options/message-statuses`] as const;
    }

    
export const getGetApiOptionsMessageStatusesQueryOptions = <TData = Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOptionsMessageStatusesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>> = ({ signal }) => getApiOptionsMessageStatuses(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOptionsMessageStatusesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>>
export type GetApiOptionsMessageStatusesQueryError = unknown


export function useGetApiOptionsMessageStatuses<TData = Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsMessageStatuses<TData = Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsMessageStatuses<TData = Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOptionsMessageStatuses<TData = Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageStatuses>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOptionsMessageStatusesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOptionsMessageSortFields = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<EnumViewModel[]>(
      {url: `/api/options/message-sort-fields`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOptionsMessageSortFieldsQueryKey = () => {
    return [`/api/options/message-sort-fields`] as const;
    }

    
export const getGetApiOptionsMessageSortFieldsQueryOptions = <TData = Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOptionsMessageSortFieldsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>> = ({ signal }) => getApiOptionsMessageSortFields(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOptionsMessageSortFieldsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>>
export type GetApiOptionsMessageSortFieldsQueryError = unknown


export function useGetApiOptionsMessageSortFields<TData = Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsMessageSortFields<TData = Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsMessageSortFields<TData = Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOptionsMessageSortFields<TData = Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsMessageSortFields>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOptionsMessageSortFieldsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOptionsSortDirections = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<EnumViewModel[]>(
      {url: `/api/options/sort-directions`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOptionsSortDirectionsQueryKey = () => {
    return [`/api/options/sort-directions`] as const;
    }

    
export const getGetApiOptionsSortDirectionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOptionsSortDirectionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOptionsSortDirections>>> = ({ signal }) => getApiOptionsSortDirections(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOptionsSortDirectionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOptionsSortDirections>>>
export type GetApiOptionsSortDirectionsQueryError = unknown


export function useGetApiOptionsSortDirections<TData = Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsSortDirections>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsSortDirections>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsSortDirections<TData = Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsSortDirections>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsSortDirections>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsSortDirections<TData = Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOptionsSortDirections<TData = Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsSortDirections>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOptionsSortDirectionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOptionsFileType = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<EnumViewModel[]>(
      {url: `/api/options/file-type`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOptionsFileTypeQueryKey = () => {
    return [`/api/options/file-type`] as const;
    }

    
export const getGetApiOptionsFileTypeQueryOptions = <TData = Awaited<ReturnType<typeof getApiOptionsFileType>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOptionsFileTypeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOptionsFileType>>> = ({ signal }) => getApiOptionsFileType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOptionsFileTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOptionsFileType>>>
export type GetApiOptionsFileTypeQueryError = unknown


export function useGetApiOptionsFileType<TData = Awaited<ReturnType<typeof getApiOptionsFileType>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsFileType>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsFileType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsFileType<TData = Awaited<ReturnType<typeof getApiOptionsFileType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOptionsFileType>>,
          TError,
          Awaited<ReturnType<typeof getApiOptionsFileType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOptionsFileType<TData = Awaited<ReturnType<typeof getApiOptionsFileType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOptionsFileType<TData = Awaited<ReturnType<typeof getApiOptionsFileType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOptionsFileType>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOptionsFileTypeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



