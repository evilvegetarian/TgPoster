/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateScheduleRequest,
  CreateScheduleResponse,
  ProblemDetails,
  ScheduleResponse
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
 */
export const getApiV1Schedule = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ScheduleResponse[]>(
      {url: `/api/v1/schedule`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ScheduleQueryKey = () => {
    return [`/api/v1/schedule`] as const;
    }

    
export const getGetApiV1ScheduleQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Schedule>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ScheduleQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Schedule>>> = ({ signal }) => getApiV1Schedule(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Schedule>>>
export type GetApiV1ScheduleQueryError = ProblemDetails


export function useGetApiV1Schedule<TData = Awaited<ReturnType<typeof getApiV1Schedule>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Schedule>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Schedule>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Schedule<TData = Awaited<ReturnType<typeof getApiV1Schedule>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Schedule>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Schedule>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Schedule<TData = Awaited<ReturnType<typeof getApiV1Schedule>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
 */

export function useGetApiV1Schedule<TData = Awaited<ReturnType<typeof getApiV1Schedule>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Schedule>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ScheduleQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const postApiV1Schedule = (
    createScheduleRequest: CreateScheduleRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CreateScheduleResponse>(
      {url: `/api/v1/schedule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createScheduleRequest, signal
    },
      );
    }
  


export const getPostApiV1ScheduleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Schedule>>, TError,{data: CreateScheduleRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Schedule>>, TError,{data: CreateScheduleRequest}, TContext> => {

const mutationKey = ['postApiV1Schedule'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Schedule>>, {data: CreateScheduleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Schedule(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Schedule>>>
    export type PostApiV1ScheduleMutationBody = CreateScheduleRequest
    export type PostApiV1ScheduleMutationError = ProblemDetails

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const usePostApiV1Schedule = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Schedule>>, TError,{data: CreateScheduleRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Schedule>>,
        TError,
        {data: CreateScheduleRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1ScheduleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const getApiV1ScheduleId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ScheduleResponse>(
      {url: `/api/v1/schedule/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ScheduleIdQueryKey = (id: string,) => {
    return [`/api/v1/schedule/${id}`] as const;
    }

    
export const getGetApiV1ScheduleIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ScheduleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ScheduleId>>> = ({ signal }) => getApiV1ScheduleId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ScheduleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ScheduleId>>>
export type GetApiV1ScheduleIdQueryError = ProblemDetails


export function useGetApiV1ScheduleId<TData = Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ScheduleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ScheduleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ScheduleId<TData = Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ScheduleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ScheduleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ScheduleId<TData = Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */

export function useGetApiV1ScheduleId<TData = Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ScheduleId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ScheduleIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const deleteApiV1ScheduleId = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/schedule/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1ScheduleIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ScheduleId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ScheduleId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1ScheduleId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1ScheduleId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1ScheduleId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1ScheduleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1ScheduleId>>>
    
    export type DeleteApiV1ScheduleIdMutationError = ProblemDetails

    /**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const useDeleteApiV1ScheduleId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ScheduleId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1ScheduleId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1ScheduleIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    