/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateTelegramBotRequest,
  CreateTelegramBotResponse,
  ProblemDetails,
  TelegramBotResponse
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
 */
export const postApiV1TelegramBot = (
    createTelegramBotRequest: CreateTelegramBotRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CreateTelegramBotResponse>(
      {url: `/api/v1/telegram-bot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTelegramBotRequest, signal
    },
      );
    }
  


export const getPostApiV1TelegramBotMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1TelegramBot>>, TError,{data: CreateTelegramBotRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1TelegramBot>>, TError,{data: CreateTelegramBotRequest}, TContext> => {

const mutationKey = ['postApiV1TelegramBot'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1TelegramBot>>, {data: CreateTelegramBotRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1TelegramBot(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1TelegramBotMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1TelegramBot>>>
    export type PostApiV1TelegramBotMutationBody = CreateTelegramBotRequest
    export type PostApiV1TelegramBotMutationError = ProblemDetails

    /**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
 */
export const usePostApiV1TelegramBot = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1TelegramBot>>, TError,{data: CreateTelegramBotRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1TelegramBot>>,
        TError,
        {data: CreateTelegramBotRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1TelegramBotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–≤
 */
export const getApiV1TelegramBot = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<TelegramBotResponse[]>(
      {url: `/api/v1/telegram-bot`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1TelegramBotQueryKey = () => {
    return [`/api/v1/telegram-bot`] as const;
    }

    
export const getGetApiV1TelegramBotQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TelegramBotQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TelegramBot>>> = ({ signal }) => getApiV1TelegramBot(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1TelegramBotQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1TelegramBot>>>
export type GetApiV1TelegramBotQueryError = ProblemDetails


export function useGetApiV1TelegramBot<TData = Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TelegramBot>>,
          TError,
          Awaited<ReturnType<typeof getApiV1TelegramBot>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1TelegramBot<TData = Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TelegramBot>>,
          TError,
          Awaited<ReturnType<typeof getApiV1TelegramBot>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1TelegramBot<TData = Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–≤
 */

export function useGetApiV1TelegramBot<TData = Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TelegramBot>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1TelegramBotQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



