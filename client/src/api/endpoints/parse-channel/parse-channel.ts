/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateParseChannelRequest,
  CreateParseChannelResponse,
  ParseChannelsResponse,
  ProblemDetails,
  UpdateParseChannelRequest
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –°–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
 */
export const postApiV1ParseChannel = (
    createParseChannelRequest: CreateParseChannelRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CreateParseChannelResponse>(
      {url: `/api/v1/parse-channel`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createParseChannelRequest, signal
    },
      );
    }
  


export const getPostApiV1ParseChannelMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ParseChannel>>, TError,{data: CreateParseChannelRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1ParseChannel>>, TError,{data: CreateParseChannelRequest}, TContext> => {

const mutationKey = ['postApiV1ParseChannel'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1ParseChannel>>, {data: CreateParseChannelRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ParseChannel(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParseChannelMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1ParseChannel>>>
    export type PostApiV1ParseChannelMutationBody = CreateParseChannelRequest
    export type PostApiV1ParseChannelMutationError = ProblemDetails

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
 */
export const usePostApiV1ParseChannel = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ParseChannel>>, TError,{data: CreateParseChannelRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1ParseChannel>>,
        TError,
        {data: CreateParseChannelRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1ParseChannelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const getApiV1ParseChannel = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ParseChannelsResponse[]>(
      {url: `/api/v1/parse-channel`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ParseChannelQueryKey = () => {
    return [`/api/v1/parse-channel`] as const;
    }

    
export const getGetApiV1ParseChannelQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ParseChannelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ParseChannel>>> = ({ signal }) => getApiV1ParseChannel(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ParseChannelQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ParseChannel>>>
export type GetApiV1ParseChannelQueryError = ProblemDetails


export function useGetApiV1ParseChannel<TData = Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ParseChannel>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ParseChannel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ParseChannel<TData = Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ParseChannel>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ParseChannel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ParseChannel<TData = Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */

export function useGetApiV1ParseChannel<TData = Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ParseChannel>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ParseChannelQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const putApiV1ParseChannelId = (
    id: string,
    updateParseChannelRequest: UpdateParseChannelRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/parse-channel/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateParseChannelRequest
    },
      );
    }
  


export const getPutApiV1ParseChannelIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ParseChannelId>>, TError,{id: string;data: UpdateParseChannelRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1ParseChannelId>>, TError,{id: string;data: UpdateParseChannelRequest}, TContext> => {

const mutationKey = ['putApiV1ParseChannelId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1ParseChannelId>>, {id: string;data: UpdateParseChannelRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1ParseChannelId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1ParseChannelIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1ParseChannelId>>>
    export type PutApiV1ParseChannelIdMutationBody = UpdateParseChannelRequest
    export type PutApiV1ParseChannelIdMutationError = ProblemDetails

    /**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const usePutApiV1ParseChannelId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ParseChannelId>>, TError,{id: string;data: UpdateParseChannelRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1ParseChannelId>>,
        TError,
        {id: string;data: UpdateParseChannelRequest},
        TContext
      > => {

      const mutationOptions = getPutApiV1ParseChannelIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    