/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ParseChannelRequest,
  ProblemDetails
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




export const postApiV1Parse = (
    parseChannelRequest: ParseChannelRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/parse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parseChannelRequest, signal
    },
      );
    }
  


export const getPostApiV1ParseMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext> => {

const mutationKey = ['postApiV1Parse'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Parse>>, {data: ParseChannelRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Parse(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Parse>>>
    export type PostApiV1ParseMutationBody = ParseChannelRequest
    export type PostApiV1ParseMutationError = ProblemDetails

    export const usePostApiV1Parse = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Parse>>,
        TError,
        {data: ParseChannelRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1ParseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    