/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * TgPoster.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ParseChannelRequest,
  ParseChannelsResponse,
  ProblemDetails
} from '../tgPosterAPI.schemas';

import { customInstance } from '../../axios-instance';




/**
 * @summary –°–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const postApiV1Parse = (
    parseChannelRequest: ParseChannelRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/parse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parseChannelRequest, signal
    },
      );
    }
  


export const getPostApiV1ParseMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext> => {

const mutationKey = ['postApiV1Parse'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Parse>>, {data: ParseChannelRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Parse(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ParseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Parse>>>
    export type PostApiV1ParseMutationBody = ParseChannelRequest
    export type PostApiV1ParseMutationError = ProblemDetails

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const usePostApiV1Parse = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Parse>>, TError,{data: ParseChannelRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Parse>>,
        TError,
        {data: ParseChannelRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1ParseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export const getApiV1Parse = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ParseChannelsResponse[]>(
      {url: `/api/v1/parse`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ParseQueryKey = () => {
    return [`/api/v1/parse`] as const;
    }

    
export const getGetApiV1ParseQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Parse>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ParseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Parse>>> = ({ signal }) => getApiV1Parse(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ParseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Parse>>>
export type GetApiV1ParseQueryError = ProblemDetails


export function useGetApiV1Parse<TData = Awaited<ReturnType<typeof getApiV1Parse>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Parse>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Parse>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Parse<TData = Awaited<ReturnType<typeof getApiV1Parse>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Parse>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Parse>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Parse<TData = Awaited<ReturnType<typeof getApiV1Parse>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */

export function useGetApiV1Parse<TData = Awaited<ReturnType<typeof getApiV1Parse>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ParseQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



